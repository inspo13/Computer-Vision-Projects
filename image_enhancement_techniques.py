# -*- coding: utf-8 -*-
"""Image enhancement techniques.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B74GtEEntvdAGB1nPO3h7JX4y31VKIsX
"""

import matplotlib.pyplot as plt
import cv2
import matplotlib.image as mpimg
import numpy as np
from google.colab.patches import cv2_imshow
img = mpimg.imread('/content/test_image-11.jpg')
print('Original Dimensions : ', img.shape)
c = 255/np.log(1 + np.max(img)) #max intensity values
log_image = c * (np.log(img + 1)) #give intensity value in vector form thus conversion to ar
log_image = np.array(log_image, dtype = np.uint8)
plt.imshow(img)
plt.show()
plt.imshow(log_image)
plt.show()

#thresholding without background
#Let threshold= T
#create a array of zeros
m=166
n=280
T=120
img_thresh = np.zeros((m,n), dtype =int)
for i in range(m):
 for j in range(n):
  flag=img[i,j]<T
  if (flag.any()):
   img_thresh[i,j]=0
  else:
   img_thresh[i,j]=255
#/convert array to png image
cv2.imwrite('/content/test_image-11.jpg',img_thresh)
cv2_imshow(img_thresh)

#Trying 4 gamma values.(Power-law transfromation)
for gamma in [0.1,0.5,1.2,2.2]:
 #Apply gamma correction
 gamma_corrected = np.array((255*(img/255)*gamma) , dtype = np.uint8)
 #save edited image
 cv2.imwrite('gamma_transformed'+str(gamma)+'/content/test_image-11.jpg',gamma_corrected)
 cv2_imshow(gamma_corrected)
 plt.show()

img = mpimg.imread('/content/test_image-12.jpg')
print('Original Dimensions : ', img.shape)
c = 255/np.log(1 + np.max(img)) #max intensity values
log_image = c * (np.log(img + 1)) #give intensity value in vector form thus conversion to ar
log_image = np.array(log_image, dtype = np.uint8)
plt.imshow(img)
plt.show()
plt.imshow(log_image)
plt.show()

#thresholding without background
#Let threshold= T
#create a array of zeros
m=183
n=260
T=125
img_thresh = np.zeros((m,n), dtype =int)
for i in range(m):
 for j in range(n):
  flag=img[i,j]<T
  if (flag.any()):
   img_thresh[i,j]=0
  else:
   img_thresh[i,j]=255
#/convert array to png image
cv2.imwrite('/content/test_image-12.jpg',img_thresh)
cv2_imshow(img_thresh)

#Trying 4 gamma values.(Power-law transfromation)
for gamma in [0.1,0.5,1.2,2.2]:
 #Apply gamma correction
 gamma_corrected = np.array((255*(img/255)*gamma) , dtype = np.uint8)
 #save edited image
 cv2.imwrite('gamma_transformed'+str(gamma)+'/content/test_image-12.jpg',gamma_corrected)
 cv2_imshow(gamma_corrected)
 plt.show()

img = mpimg.imread('/content/test_image-13.jpg')
print('Original Dimensions : ', img.shape)
c = 255/np.log(1 + np.max(img)) #max intensity values
log_image = c * (np.log(img + 1)) #give intensity value in vector form thus conversion to ar
log_image = np.array(log_image, dtype = np.uint8)
plt.imshow(img)
plt.show()
plt.imshow(log_image)
plt.show()

#thresholding without background
#Let threshold= T
#create a array of zeros
m=225
n=225
T=125
img_thresh = np.zeros((m,n), dtype =int)
for i in range(m):
 for j in range(n):
  flag=img[i,j]<T
  if (flag.any()):
   img_thresh[i,j]=0
  else:
   img_thresh[i,j]=255
#/convert array to png image
cv2.imwrite('/content/test_image-13.jpg',img_thresh)
cv2_imshow(img_thresh)

#Trying 4 gamma values.(Power-law transfromation)
for gamma in [0.1,0.5,1.2,2.2]:
 #Apply gamma correction
 gamma_corrected = np.array((255*(img/255)*gamma) , dtype = np.uint8)
 #save edited image
 cv2.imwrite('gamma_transformed'+str(gamma)+'/content/test_image-13.jpg',gamma_corrected)
 cv2_imshow(gamma_corrected)
 plt.show()

img = mpimg.imread('/content/test_image-14.jpg')
print('Original Dimensions : ', img.shape)
c = 255/np.log(1 + np.max(img)) #max intensity values
log_image = c * (np.log(img + 1)) #give intensity value in vector form thus conversion to ar
log_image = np.array(log_image, dtype = np.uint8)
plt.imshow(img)
plt.show()
plt.imshow(log_image)
plt.show()

#thresholding without background
#Let threshold= T
#create a array of zeros
m=263
n=192
T=125
img_thresh = np.zeros((m,n), dtype =int)
for i in range(m):
 for j in range(n):
  flag=img[i,j]<T
  if (flag.any()):
   img_thresh[i,j]=0
  else:
   img_thresh[i,j]=255
#/convert array to png image
cv2.imwrite('/content/test_image-14.jpg',img_thresh)
cv2_imshow(img_thresh)

#Trying 4 gamma values.(Power-law transfromation)
for gamma in [0.1,0.5,1.2,2.2]:
 #Apply gamma correction
 gamma_corrected = np.array((255*(img/255)*gamma) , dtype = np.uint8)
 #save edited image
 cv2.imwrite('gamma_transformed'+str(gamma)+'/content/test_image-14.jpg',gamma_corrected)
 cv2_imshow(gamma_corrected)
 plt.show()